<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAADjsAAA47AAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDXkUAimNJAH9cQwB/XEMBnnJWBPGz
        kgDkp4YAuYhtAAAAAAAAAAAAAAAAAwAAAAcAAAADAAAAAAAAAAC9lncA/9CgAP/oswBqUUQEFxgeARYX
        HQAyKyoAIB8jAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhWBGALJ+YACxfmAAk2pOA5hv
        VAFWRDAARzwsCXpZQkKKY0t/kWhPrJRqUcmVa1LYlGpR3I9nUNiFYEvJdFVErWBJPX8yKihCAAAACQAA
        AABjTkIBSDo1A5pyWgCgdFsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIhiRwCUak4AlmtPAIli
        RwNBKBAAUjkiEqR2WIKmdlnlqHdb/7F9YP62gGL/t4Fj/7mCZP+6g2T/uIJk/72FZv/AiGj/q3ld/ptv
        V/99W0rlRjgzgwAAAhIAAAAAKiUmA0U4MwAAAAAA3Z56AN2eegDdnnoA3Z56A92eegTdnnoE3Z56BN2e
        egTFjWwGh1xAAH1YPUOoel7nfmhc/515Z/7Eh2b9t39g+7N9YPy3f2D9tX5g/bR/Yf28gWD9nnll/Xhl
        W/zCi237voNi/bqCYv6pd13/clRF5x4cIEMwKy0ARjk2AgAAAADdnnoA3Z56AN2eegDdnnoA3Z56AN2e
        egB6WUMAjmZLAoRgRQCDX0U9oXJV+sqRcv9FPDf7RDs3/baKcv+yhGv/w4xt/7GFbf+3h23/toBi/7uN
        c/+UeGn/ERQW/6WBbv+sf2f/wI1w/b2DY/u/hmb/f1xL+xEUHDwVGB4A3Z56AN2eegDdnnoB3Z56AN2e
        emLdnnqG3Z56ft2eeoDdnnqB3J56eKR1V9S0f2H/w4lp+3lhVP8FBgj/Qjw7/yEgIf97Z13/UUtJ/15N
        RP/Um3z/PTY0/2ZcWP8mIB//Kicm/zQxMf85MzL/sIZv/7iAYfq5gmT/YUk+vP/ppgDdnnoA3Z56Ad2e
        egDdnnoT3Z56692eev/dnnr+3Z56/9+fe//WmXb/rntc/baAY/6+hGT/lHJg/xYYG/+8j3b/n3di/x4d
        Hv8xMTL/PDQv/9abe/9PPTT/SENA/zk0Mv9xW0//zpl7/zkwLP9FPDj/w45w/rqCYv+DX03jAAAAEN2e
        egDdnnoD3Z56AN2eek7dnnr/3Z56+N2eevvdnnr73Z56+9udefuxgGH9tX9h/7mBYf+whW3/ERUY/5p2
        Y//NmX3/JyQi/zU1Nv8pJib/y5uB/3NbTv8rKir/TkhG/0Y6NP/do4P/alZL/x0eH//Aj3T9vIJi/2tQ
        Q8v///8A3Z56AN2eegPdnnoA3Z56lt2eev/dnnr73Z56/92eev/cnnr/4KB7/8uVdP+xgWX/tHtc/7+M
        cP83MjD/Kico/zMwMP8tJiT/m4J1/xQREP83MjD/Hh0e/1dIQf+BbGH/ERIU/0I9PP8YGBr/dWBV/8yQ
        b/2MZE//KCUnWTUtLADdnnoB3Z56AN2eegXdnnrY3Z56/92eev3dnnr/3Z56/92eev/dnnr/3596/82a
        fP+5jXP/tYBi/7GCaP+memP/pXxl/7uKbv/CkHT/GRoc/3FdUv+1iHD/vIhs/7iGav+sgmv/pXtj/7aJ
        b/+9h2n7j2ZQ/25TRZy6iGsAtINnA92eegPdnnoA3Z56Nt2eev/dnnr/3Z56/92eev/dnnr/3Z56/92e
        ev/dnnr/3596/9mjhP/OpIz/xJh//76Lb/+5gWL/sXhY/7qDZP97ZFj/mXdl/8GEY/+0fV//tn9h/7d/
        X/+we13/nW5U/5BoUvq8iGv/5aN+gPWvhgDen3sE3Z56BN2eegDdnnp73Z56/92eevvdnnr/3Z56/92e
        ev/dnnr/3Z56/92eev/cnnr/3p14/9+gfP/fq43/3rSc/9axm//MpY7/wZd//8eXfP+9jXH/soJm/7B+
        YP+selz/qnpd/7B/Yv/DjW7/3597+uSjff/anHiB4KB7AOGhfATdnnoB3Z56AN2eesPdnnr/3Z56/N2e
        ev/dnnr/3Z56/92eev/dnnr/3Z56/92eev/dnnr/3Z56/9ybdv/dm3b/36B8/+Clg//fpoX/2aGB/9ae
        ff/WnHr/1pp2/9mbd//fn3v/46N+/+Oiff3dnnrz3J15/92eeoDdnnoA3Z56Bd2eegDdnnog3Z56992e
        ev/dnnr+3Z56/92eev/dnnr/3Z56/92eev/dnnr/3Z56/92eev/dnnr/3Z57/92fe//cnnr/3Jx4/92c
        d//dnXj/3p55/9+fev/fn3v/3p97/92eev7cnXn/3J156t2eer3dnnr/3Z56ft2eegDdnnoF3Z56AN2e
        el7dnnr/3Z56/N2eev/dnnr/3Z56/92eev/dnnr/3Z56/92eev/dnnr/3Z56/92eev/dnnr/3Z56/92e
        ev/dnnr/3Z56/92eev/dnnr/3Z56/92eev/dnnr/3Z56/d2eev/dnnq73Z56kt2eev/dnnp93Z56AN2e
        egXdnnoA3Z56pt2eev/dnnr83Z56/92eev/dnnr/3Z56/92eev/dnnr/3Z56/92eev/dnnr/3Z56/92e
        ev/dnnr/3Z56/92eev/dnnr/3Z56/92eev/dnnr/3Z56/92eev/dnnr73Z56/92eenbdnnqE3Z56/92e
        enzdnnoA3Z56Bd2eeg/dnnrg3Z56/92eevrdnnr+3Z56/92eev7dnnr83Z56/N2eevzdnnr83Z56/N2e
        evzdnnr83Z56/N2eevzdnnr83Z56/N2eevzdnnr83Z56/N2eevzdnnr83Z56/N2eevrdnnr/3Z56L92e
        eojdnnr/3Z56fN2eegDdnnoF3Z56UN2eev/dnnr+3Z56/92eev/dnnr/3Z56/92eev/dnnr/3Z56/92e
        ev/dnnr/3Z56/92eev/dnnr/3Z56/92eev/dnnr/3Z56/92eev/dnnr/3Z56/92eev/dnnr93Z56/92e
        eubdnnoA3Z56kt2eev/dnnp83Z56AN2eegXdnnoo3Z56Ut2eek/dnnpE3Z56xt2eev/dnnq23Z56Q92e
        elLdnnpP3Z56T92eek/dnnpP3Z56T92eek/dnnpP3Z56T92eek/dnnpP3Z56T92eek/dnnpP3Z56T92e
        ek7dnnpT3Z56P92eegDdnnqW3Z56/92eenzdnnoA3Z56BQAAAADdnnoA3Z56A92eegDdnnqt3Z56/92e
        epXdnnoA3Z56BN6eegAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAN6eegDdnnoE3Z56AN2eepTdnnr/3Z56fN2eegDdnnoF3Z56At2eegTdnnoG3Z56AN2e
        erDdnnr/3Z565N2eesXdnnrJ3Z56yd2eesndnnrJ3Z56yd2eesndnnrJ3Z56yN2eesrdnnrM3Z56zN2e
        esrdnnrI3Z56yd2eesndnnrJ3Z56yd2eesndnnrB3Z565N2eev/dnnp/3Z56AN2eegUAAAAA3Z56AN2e
        egPdnnoA3Z56st2eev/dnnr83Z56/92eev/dnnr/3Z56/92eev/dnnr/3Z56/92eev/dnnr/3Z56/92e
        ev/dnnr/3Z56/92eev/dnnr/3Z56/92eev/dnnr/3Z56/92eev/dnnr73Z56/92eeoDdnnoA3Z56BQAA
        AADdnnoA3Z56Ad2eegDdnno23Z56Ut2eekzdnnpL3Z56S92eekvdnnpL3Z56S92eekvdnnpL3Z56Td2e
        ekPdnnrJ3Z56/92eev/dnnqK3Z56Qd2eelLdnnpP3Z56T92eek/dnnpR3Z56Rd2eesXdnnr/3Z56ft2e
        egDdnnoFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANyd
        ewDdnnoD3Z56AN2eelDdnnr/3Z56/92eerfdnnoA3Z56Ad2eegAAAAAA3Z95AN2eegPdnnoA3Z56rN2e
        ev/dnnp93Z56AN2eegUAAAAA3Z56AN2eegDdnnoA3Z56At2eegTdnnoD3Z56A92eegPdnnoD3Z56A92e
        egPdnnoD3Z56A92eegTdnnoE3595AN2eesTdnnr/3Z56+N2eeqbdnnqV3Z56md2eepjdnnqY3Z56md2e
        epPdnnrZ3Z56/92een3dnnoA3Z56BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADcnnoA3Z56AN2eegPdnnoA3Z56UN2eev/dnnr93Z56/92eev/dnnr/3Z56/92e
        ev/dnnr/3Z56/92eevvdnnr/3Z56gN2eegDdnnoFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADdnnoA3Z56AN2eegDdnnoG3Z56cd2eeoPdnnp73Z56e92e
        enzdnnp83Z56fN2eenzdnnp73Z56fN2eeondnnpA3Z56AN2eegIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN2eegDdnnoA3Z56AN2eegHdnnoA3Z56AN2e
        egAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN2eegDdnnoA3Z56AN2e
        egTdnnoE3Z56BN2eegTdnnoE3Z56BN2eegTdnnoE3Z56BN2eegTdnnoF3Z56At2eegDdnnoAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/9EiRf8kABL/UAAFkCAAAqVAAAGQAAABoAAAACAAAAEgAAABQAAAAkAA
        AAJAAAACQAAAAoAAAAKAAAACgAAAAgAAAAIAAAAiAAAAIpE//yIQAAACkAAAApAAAAL//Qki0ACAAv/8
        gAL//IAC//6X///+gAL///////////////8=
</value>
  </data>
</root>